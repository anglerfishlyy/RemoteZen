// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  teams     TeamMember[]
  tasks     Task[]        @relation("UserTasks")
  focusLogs FocusLog[]
}

model Team {
  id        String       @id @default(uuid())
  name      String
  createdAt DateTime     @default(now())

  members   TeamMember[]
  tasks     Task[]
}

model TeamMember {
  id        String   @id @default(uuid())
  role      String   @default("member")
  joinedAt  DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId String
  team   Team @relation(fields: [teamId], references: [id])
  teamId String

  @@unique([teamId, userId])
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String   @default("todo") // todo / in-progress / done
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team      Team   @relation(fields: [teamId], references: [id])
  teamId    String
  assignedTo User? @relation("UserTasks", fields: [assignedToId], references: [id])
  assignedToId String?
}

model FocusLog {
  id        String   @id @default(uuid())
  startTime DateTime @default(now())
  endTime   DateTime?
  duration  Int?

  user   User @relation(fields: [userId], references: [id])
  userId String
}