generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(MEMBER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  teams         TeamMember[]
  createdTasks  Task[]       @relation("CreatedTasks")
  assignedTasks Task[]       @relation("AssignedTasks")
  timers        Timer[]
  focusLogs     FocusLog[]
  invitations   Invitation[] @relation("UserInvitations")
}

model Team {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  members     TeamMember[]
  tasks       Task[]
  invitations Invitation[]
}

model TeamMember {
  id       String   @id @default(uuid())
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  @@unique([teamId, userId])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      Status    @default(PENDING)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  team         Team    @relation(fields: [teamId], references: [id])
  teamId       String
  createdBy    User    @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById  String
  assignedTo   User?   @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?

  timers Timer[]
}

model Timer {
  id        String    @id @default(uuid())
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int? // seconds

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model FocusLog {
  id        String    @id @default(uuid())
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Invitation {
  id        String       @id @default(uuid())
  email     String
  role      Role         @default(MEMBER)
  status    InviteStatus @default(PENDING)
  createdAt DateTime     @default(now())

  team        Team   @relation(fields: [teamId], references: [id])
  teamId      String
  invitedBy   User   @relation("UserInvitations", fields: [invitedById], references: [id])
  invitedById String
}

enum Role {
  MEMBER
  MANAGER
  ADMIN
}

enum Status {
  PENDING
  IN_PROGRESS
  DONE
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}
